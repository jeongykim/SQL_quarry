마이sql 들어갈때 실행키
mysql -uroot -p
비밀번호 1234

CREATE TABLE Book(
bookid 		INTEGER PRIMARY KEY,
bookname 	VARCHAR(40),
publisher 	VARCHAR(40),
price 		INTEGER
);

CREATE TABLE Customer(
custid INTEGER PRIMARY KEY,
name VARCHAR(40),
address VARCHAR(50),
phone VARCHAR(20)
);

CREATE TABLE Orders(
orderid INTEGER PRIMARY KEY,
custid INTEGER,
bookid INTEGER,
saleprice 	INTEGER,
orderdate DATE,
FOREIGN KEY(custid) REFERENCES Customer(custid),
FOREIGN KEY(bookid) REFERENCES Book(bookid)
);


데이터베이스 생성
create database my_test_1;
생성한 데이터베이스 경로 사용
use my_test_1;
데이터 베이스 안에 들어있는 값들 확인하기 
show tables;
만든 테이블 속성 알아보기
desc book;
만든 테이블 제거하기 (drop table 원하는테이블명)
drop table orders;
데이터베이스 목록 보기
show databases;
#############################################################333
관리자 권한으로 mysql로그인 해서 database확인하기, 그리고 관리자 권한으로 하나 더 cmd창 열어서 거기에는 mysqldump 를 쳐서 사용한다.
데이터 백업하기(mysql로그인 하지말고 관리자권한 프롬프트 한개 더 연다) (현재 백업을 하고 싶은 파일은 my_test_1)
mysqldump -uroot -p1234 my_test_1 > c:\mysql\bin\dumptest_20210608.db
                                                  c:\dumptest_20210608.db (경로 마음대로)
백업데이터 사용하기(기존 my_test_1 copy본 만들기)
create database my_test_1_copy; 
만들면 이름만 만들어진 텅빈 내용의 my_test_1_copy가 만들어짐
그리고 두번째 프롬프트로 가서
mysql -uroot -p my_test_1_copy < c:\dumptest_20210608.db
치고 비밀번호 입력하면 내용 그대로 my_test_1_copy가 만들어짐
################################################
원하는 csv 출력하기
mysql.ini 에 secure-file-priv="C:/" 이렇게 원하는 경로를 쳐준다.
그리고 mysql을 서비스로 들어가서 실행 중지했다가 다시 실행해준다.
그리고 cmd창 들어가서 mysql 창 들어가서 create를 통해 csv담아놓을 틀을 만들고 밑에 명령문을 쳐준다.
load data infile 'c:/test.csv' into table csv_test fields terminated by ','enclosed by '"' lines terminated by '\n' ignore 1 rows;
이후 제대로 들어간 것을 확인할 수 있다.

INSERT INTO book VALUES(1,'축구의 역사','굿스포츠',7000);
INSERT INTO book VALUES(2,'축구아는 여자','나무수',13000);
INSERT INTO book VALUES(3,'축구의 이해','대한미디어',22000);
INSERT INTO book VALUES(4,'골프 바이블','대한미디어',35000);
INSERT INTO book VALUES(5,'피겨 교본','굿스포츠',8000);
INSERT INTO book VALUES(6,'역도 단계별기술','굿스포츠',6000);
INSERT INTO book VALUES(7,'야구의 추억','이상미디어',20000);
INSERT INTO book VALUES(8,'야구를 부탁해','이상미디어',13000);
INSERT INTO book VALUES(9,'올림픽 이야기','삼성당',7500);
INSERT INTO book VALUES(10,'Olympic Champions','Pearson',13000);

INSERT INTO Customer VALUES(1,'박지성','영국 멘체스터','000-5000-0001');
INSERT INTO Customer VALUES(2,'김연아','대한민국 서울','000-6000-0001');
INSERT INTO Customer VALUES(3,'장미란','대한민국 강원도','000-7000-0001');
INSERT INTO Customer VALUES(4,'추신수','미국 클리블랜드','000-8000-0001');
INSERT INTO Customer VALUES(5,'박세리','대한민국 대전',NULL);

INSERT INTO Orders VALUES(1,1,1,6000,STR_TO_DATE('2014-07-01','%Y-%m-%d'));
INSERT INTO Orders VALUES(2,1,3,21000,STR_TO_DATE('2014-07-03','%Y-%m-%d'));
INSERT INTO Orders VALUES(3,2,5,8000,STR_TO_DATE('2014-07-03','%Y-%m-%d'));
INSERT INTO Orders VALUES(4,3,6,6000,STR_TO_DATE('2014-07-04','%Y-%m-%d'));
INSERT INTO Orders VALUES(5,4,7,20000,STR_TO_DATE('2014-07-05','%Y-%m-%d'));
INSERT INTO Orders VALUES(6,1,2,12000,STR_TO_DATE('2014-07-07','%Y-%m-%d'));
INSERT INTO Orders VALUES(7,4,8,13000,STR_TO_DATE('2014-07-07','%Y-%m-%d'));
INSERT INTO Orders VALUES(8,3,10,12000,STR_TO_DATE('2014-07-08','%Y-%m-%d'));
INSERT INTO Orders VALUES(9,2,10,7000,STR_TO_DATE('2014-07-09','%Y-%m-%d'));
INSERT INTO Orders VALUES(10,3,8,13000,STR_TO_DATE('2014-07-10','%Y-%m-%d'));

원하는 값 바꾸기
update book set price=8000 where bookid = 1;

book이라는 관계(표)에서 가격이 10000원 이하인 도서목록을 검색해 보자
book이라는 관계(표)에서 가격이 7000원 이상 10000원 이하인 도서목록과 가격을 검색해 보자
select bookname,price from book where price>7000 and price <= 10000;
select bookname,price from book where price BETWEEN 7000 and 10000;

축구를 포함하는 개체 선택 
select bookname, price from book where bookname LIKE '%축구%';

select * from book where bookname like '%축구%' and price >=20000;

책 제목에 축구라는 문구가 있고, 대한미디어는 제외하는 레코드를 검색

범위
book이라는 관계(표)에서 가격이 7000원이상 10000원 이하인 도서목록을 검색해보자
select bookname, price from book where price >= 7000 and price <= 10000;
select bookname, price from book where price BETWEEN 7000 and 10000;

#LIKE '%%': 일정 문자 포함되어있는 것 추출
select bookname, price from book where bookname LIKE '%축구%';

책 제목에는 축구라는 문구가 있고 대한 미디어는 제외하는 레코드를 검색
SELECT * FROM Book WHERE bookname LIKE '%축구%' AND NOT publisher = '대한미디어';


order 순으로 / BY 1차기준, 2차기준
SELECT * FROM Book ORDER BY price , bookname;

SELECT SUM(saleprice) FROM Orders;

SELECT 2*SUM(saleprice) +1 AS '총매출 예상 값' FROM Orders;

SELECT SUM(saleprice)*0.4-100+1 '총매출 예상 값' FROM Orders;


#163
고객별로 주문한 도서의 총 수량과 총 판매액 구하자
별로, 총 -> 'GROUP BY'
SELECT custid, COUNT(*) AS     총수량, SUM(saleprice) AS '총판매액' FROM Orders GROUP BY custid;


가격이 8000원 이상인 도서를 구매한 고객에 대하여 고객별로 주문한 도서의 총수량과 구하자
   단 두권이상 구매한 고객만 구하시오 (WHERE saleprice >= 8000를 사용.)
SELECT custid, COUNT(*) AS '총수량', SUM(saleprice) AS '총 판매액' FROM Orders WHERE saleprice >= 8000 GROUP BY custid HAVING COUNT(*) >= 2;

** WHERE: 집계되기 전 데이터 기준찾는 역할
** HAVING: 집계된 결과(GROUP BY)에서의 WHERE 역할

SELECT * FROM Customer, Orders WHERE Customer.custid = Orders.custid;


동등 조인
 SELECT * FROM Customer, Orders WHERE Customer.custid = Orders.custid ORDER BY Customer.custid;

고객별로 주문한 모든 도서의 총 판매액을 구하고, 고객 별로 정렬하시오.
SELECT name, SUM(saleprice)  FROM Customer, Orders  WHERE Customer.custid = Orders.custid GROUP BY Customer.name ORDER BY Customer.name;

고객의 이름과 고객이 주문한 도서의 이름을 구하시오.

