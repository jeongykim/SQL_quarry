## 199쪽 2번문제

1. 마당서점 도서의 총 개수
SELECT COUNT(*) FROM book;
10개

2. 마당서점에 도서를 출고하는 출판사의 총 개수
SELECT COUNT(DISTINCT publisher) FROM book;
6개

3. 모든 고객의 이름, 주소
SELECT name, address FROM customer;

4. 2014년 7월 4일~ 7월 7일 7일 사이에 주문받은 도서의 주문번호
 1. SELECT orderid, orderdate FROM orders WHERE orderdate  
BETWEEN STR_TO_DATE('2014-07-04', '%Y-%m-%d') AND STR_TO_DATE('2014-07-07', '%Y-%m-%d');

 2. SELECT orderid, orderdate FROM orders WHERE orderdate BETWEEN '20140704' AND '20140707';

5. 2014년 7월 4일~ 7월 7일 7일 사이에 주문받은 도서를 제외한 도서의 주문번호
 1. SELECT orderid, orderdate FROM orders WHERE orderdate < STR_TO_DATE('2014-07-04', '%Y-%m-%d') 
OR orderdate >  STR_TO_DATE('2014-07-07', '%Y-%m-%d');

 2. SELECT orderid, orderdate FROM orders WHERE orderdate NOT BETWEEN '20140704' AND '20140707';

6. 성이 '김'씨인 고객의 이름과 주소
SELECT name, address FROM customer WHERE name LIKE '김%';

7. 성이 '김'씨이고 이름이 '아'로 끝나는 고객의 이름과 주소
SELECT name, address FROM customer WHERE name LIKE '김%' AND name LIKE '%아';

8. 주문하지 않은 고객의 이름(부속질의 사용)
SELECT name FROM customer WHERE custid NOT IN (SELECT custid  FROM orders);

9. 주문 금액의 총액과 주문의 평균 금액
SELECT SUM(saleprice) AS '총액', AVG(saleprice) AS '평균금액' FROM orders;

10. 고객의 이름과 고객별 구매액
SELECT name, Sum(saleprice) FROM customer, orders 
WHERE customer.custid=orders.custid GROUP BY customer.name;

11. 고객의 이름과 고객이 구매한 도서 목록
SELECT name, bookname FROM book, customer, orders 
WHERE customer.custid = orders.custid AND orders.bookid=book.bookid;

12. 도서의 가격(book 테이블)과 판매가격(order 테이블)의 차이가 가장 많은 주문
SELECT * FROM book, orders WHERE book.bookid = orders.bookid 
AND price - saleprice = (SELECT MAX(price-saleprice) FROM book, orders WHERE book.bookid = orders.bookid);

13. 도서의 판매액 평균보다 자신의 구매액 평균이 더 높은 고객의 이름
 SELECT name, AVG(saleprice) FROM customer, orders WHERE customer.custid = orders.custid
 GROUP BY name
 HAVING AVG(saleprice) > (SELECT AVG(saleprice) FROM orders);












